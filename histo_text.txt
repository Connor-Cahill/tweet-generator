What distinguishes Pragmatic Programmers? We feel it’s an attitude, a
style, a philosophy of approaching problems and their solutions. They
think beyond the immediate problem, always trying to place it in its
larger context, always trying to be aware of the bigger picture. After all,
without this larger context, how can you be pragmatic? How can you
make intelligent compromises and informed decisions?
Another key to their success is that they take responsibility for everything they do, which we discuss in The Cat Ate My Source Code. Being
responsible, Pragmatic Programmers won’t sit idly by and watch their
projects fall apart through neglect. In Software Entropy, we tell you how
to keep your projects pristine.
Most people find change difficult to accept, sometimes for good reasons,
sometimes because of plain old inertia. In Stone Soup and Boiled Frogs,
we look at a strategy for instigating change and (in the interests of
balance) present the cautionary tale of an amphibian that ignored the
dangers of gradual change.
One of the benefits of understanding the context in which you work
is that it becomes easier to know just how good your software has to
be. Sometimes near-perfection is the only option, but often there are
trade-offs involved. We explore this in Good-Enough Software.
Of course, you need to have a broad base of knowledge and experience
to pull all of this off. Learning is a continuous and ongoing process.
In Your Knowledge Portfolio, we discuss some strategies for keeping the
momentum up